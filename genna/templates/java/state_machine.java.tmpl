##======================================================================
##
## Copyright (C) 2007. Mario Rincon Nigro.
## Universidad de Los Andes.
##
## This file is part of Genna.
##
## Genna is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 2 of the License, or
## (at your option) any later version.
##
## Genna is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with Genna.  If not, see <http://www.gnu.org/licenses/>.
##
##======================================================================

##================================================
## state_machine.java.tmpl: plantilla implementar
## maquinas de estado en el contexto de una clase
## en Java
##================================================

private ${_class.name}StateMachine __mySM;

##===========================
## DECLARACION DE CONSTANTES PARA NOMBRES DE EVENTOS.
## SE DECLARA UNA CONSTANTE POR CADA EVENTO DE LLAMADA
## Y CADA EVENTO DE TIEMPO.
##===========================
#set $_event_names = []
#set $_i = 0
#for $_item in ['callEvent', 'timeEvent']
    #for $_transition in $_state_machine.transition[$_item]
        #if $_transition.trigger.name not in $_event_names
            #silent $_event_names.append($_transition.trigger.name)
            private static final int __$capitalize($_transition.trigger.name) = $_i;
            #set $_i += 1
        #end if
    #end for
#end for

##===========================
## DEFINICION DE OPERACIONES PRIVADAS EN CLASE CONTEXTO PARA ACCIONES DE ESTADO
##===========================
#for $_item in ['simpleState', 'compositeState', 'finalState']
    #for $_state in $_state_machine.states[$_item]

        #if $_state is not $_state_machine.top
            #if $_state.entry
                private void __${capitalize($_state.name)}Entry(){
                    ##/*%_<*/
                    $join($_state.entry, '\n')
                    ##/*>_%*/
                }
            #end if

            ## LOS ESTADOS COMPUESTOS NO TIENEN DO ACTIVITY

            #if $_state.type != 'compositeState' and $_state.doActivity
                private void __${capitalize($_state.name)}DoActivity(){
                    ##/*%_<*/
                    $join($_state.doActivity, '\n')
                    ##/*>_%*/
                }
            #end if

            ## LOS ESTADOS FINALES NO TIENEN EXIT

            #if $_state.type != 'finalState' and $_state.exit
                private void __${capitalize($_state.name)}Exit(){
                    ##/*%_<*/
                    $join($_state.exit, '\n')
                    ##/*>_%*/
                }
            #end if
        #end if

    #end for
#end for

##============================
## DEFINICION DE OPERACIONES PRIVADAS EN CLASE PRIVADA PARA EFFECTOS Y GUARDIAS DE TRANSICION
##============================
#for $_item in ['callEvent', 'timeEvent', 'none']
    #for $_transition in $_state_machine.transition[$_item]

        #if $_transition.effect
            private void __${capitalize($_transition.name)}Effect(){
                ##/*%_<*/
                $join($_transition.effect, '\n')
                ##/*>_%*/
            }
        #end if

        #if $_transition.guard
            private boolean __${capitalize($_transition.name)}Guard(){
                ##/*%_<*/
                return ($_transition.guard);
                ##/*>_%*/
            }
        #end if
    #end for
#end for

##=============================
## DEFINICION DE MAQUINA DE ESTADO PARA CLASE
##=============================
private class ${_class.name}StateMachine extends __smbase.StateMachine{

#for $_item in ['simpleState', 'compositeState', 'finalState', 'pseudostate']
    #for $_state in $_state_machine.states[$_item]
        #if ($_state is not $_state_machine.top) and ($_item != 'pseudostate' or ($_item == 'pseudostate' and $_state.kind == 'initial'))
            private __smbase.State $lowerize($_state.name);
        #end if
    #end for
#end for

#for $_item in ['callEvent', 'timeEvent', 'none']
    #for $_transition in $_state_machine.transition[$_item]
        private __smbase.Transition $lowerize($_transition.name);
    #end for
#end for

public ${_class.name}StateMachine(Object c){
    super(c);
}

protected void init(){
#for $_item in ['compositeState', 'simpleState', 'finalState', 'pseudostate']
    #for $_state in $_state_machine.states[$_item]
        #if ($_state is not $_state_machine.top) and ($_item != 'pseudostate' or ($_item == 'pseudostate' and $_state.kind == 'initial'))
            $lowerize($_state.name) = new ${capitalize($_state.name)}(this);
        #end if
    #end for
#end for
#for $_item in ['callEvent', 'timeEvent', 'none']
    #for $_transition in $_state_machine.transition[$_item]
        #set $_hasEffect = 'false'
        #if $_transition.effect
            #set $_hasEffect = 'true'
        #end if
        $lowerize($_transition.name) = new ${capitalize($_transition.name)}($_hasEffect);
    #end for
#end for

#for $_item in ['compositeState', 'simpleState', 'finalState', 'pseudostate']
    #for $_state in $_state_machine.states[$_item]
        #if ($_state is not $_state_machine.top) and ($_item != 'pseudostate' or ($_item == 'pseudostate' and $_state.kind == 'initial'))
            ${lowerize($_state.name)}.setDirectAncestor($lowerize($_state.directAncestor.name));
        #end if
    #end for
#end for

innermostActive = $lowerize($_state_machine.top.initial.name);
}

#for $_item in ['simpleState', 'compositeState', 'finalState', 'pseudostate']
    #for $_state in $_state_machine.states[$_item]

    #if ($_state is not $_state_machine.top) and ($_item != 'pseudostate' or ($_item == 'pseudostate' and $_state.kind == 'initial'))

        private class $capitalize($_state.name) extends __smbase.State{ 

        public $capitalize($_state.name) (__smbase.StateMachine sm) {
            super(sm);
        }

        public __smbase.EventHandle handleEvent(__smbase.Event e){

            __smbase.EventHandle handle = null;
        #if $_state.outgoing.keys()

            java.util.LinkedList<__smbase.Transition> transitionSequence = new java.util.LinkedList<__smbase.Transition>();

            switch(e.getName()){
            #for $_trigger in $_state.outgoing.keys()
                #if $_trigger == 'none'
                    #if $_state.type == 'compositeState'
                        case __smbase.StateMachine.COMPLETED:
                    #else
                        case __smbase.StateMachine.COMPLETION:
                    #end if
                #else
                    case ${_class.name}.__${_trigger}:
                #end if
                ## TODAS LAS TRANSICIONES DE $_state.outgoing[$_trigger] ESTAN ASOCIADAS
                ## AL MISMO TRIGGER
                ## EVENTO. ESTO QUIERE DECIR SI ESE EVENTO ES DE TIEMPO
                #set $_some_transition = $_state.outgoing[$_trigger][0]
                #if $_some_transition in $_state_machine.transition['timeEvent']
                    if(isWaited(e)){
                #end if
                #set global $_transition_list = $_state.outgoing[$_trigger]
                #set $_source = $join_path($JAVA_TEMPLATES_DIR, 'transition.java.tmpl')
                #include $_source
                #if $_state.outgoing[$_trigger][0] in $_state_machine.transition['timeEvent']
                        removeWaited(e);
                    }
                #end if
                break;

            #end for
            }
        #end if
            return handle;
        }

        public void entry(){
        #if $_state.hasOutgoingTimeEvent
            __smbase.Event e;
        #end if

        #if $_state.entry
            (($_class.name)context).__${capitalize($_state.name)}Entry();
        #end if

        #for $_trigger in $_state.outgoing.keys()
            #set $_some_transition = $_state.outgoing[$_trigger][0]
            #if $_some_transition in $_state_machine.transition['timeEvent']
                e = new __smbase.Event(${_class.name}.__$_trigger);
                addWaited(e);
                postTimeEvent(e, $_some_transition.trigger.when);
            #end if
        #end for

        #if $_state.type == 'compositeState' and $_state.initial
            if(this == stateMachine.getInnermostActive()){
                stateMachine.setInnermostActive($lowerize($_state.initial.name));
                ##stateMachine.getInnermostActive().entry();
            }
        #end if
        }

        #if $_state.type != 'compositeState'
            public void doActivity(){
            #if $_state.type != 'compositeState' and $_state.doActivity
                (($_class.name)context).__${capitalize($_state.name)}DoActivity();
            #end if
            #if $_state.type != 'finalState'
                postCompletionEvent(new __smbase.Event(__smbase.StateMachine.COMPLETION));
            #else
                postCompletionEvent(new __smbase.Event(__smbase.StateMachine.COMPLETED));
            #end if
        }
        #end if

        #if $_state.type != 'finalState' and $_state.exit or $_state.hasOutgoingTimeEvent
            public void exit(){
            #if $_state.type != 'finalState' and $_state.exit
                (($_class.name)context).__${capitalize($_state.name)}Exit();
            #end if
            #if $_state.hasOutgoingTimeEvent
                clearWaited();
            #end if
        }
        #end if
    }

    #end if

    #end for
#end for

##==============================
## DECLARACION DE CLASES DE TRANSICION
##==============================
#for $_item in ['callEvent', 'timeEvent', 'none']
    #for $_transition in $_state_machine.transition[$_item]

        private class $capitalize($_transition.name) extends __smbase.Transition {

            public ${capitalize($_transition.name)}(boolean b){
                super(b);
            }

            #if $_transition.effect
            public void executeEffect(){
                (($_class.name)context).__${capitalize($_transition.name)}Effect();
            }
            #end if
        }

    #end for
#end for

}
